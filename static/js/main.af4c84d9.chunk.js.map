{"version":3,"sources":["img/logo.png","context/auth.js","PrivateRoute.js","pages/Home.js","components/AuthForms.js","pages/Admin.js","pages/Login.js","pages/Signup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AuthContext","createContext","useAuth","useContext","PrivateRoute","Component","component","rest","setCurrentUser","render","props","currentUser","JSON","parse","localStorage","getItem","to","pathname","state","referer","location","Home","Card","styled","div","Form","Input","input","Button","button","Logo","img","Error","Admin","onClick","removeItem","Login","useState","isLoggedIn","setLoggedIn","isError","setIsError","userName","setUserName","password","setPassword","src","logoImg","type","placeholder","value","onChange","e","target","users","findedUser","find","x","setItem","stringify","Signup","repeatPassword","setRepeatPassword","message","setMessage","user","push","App","Provider","data","className","href","exact","path","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af4c84d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.862d26fa.png\";","import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useAuth } from \"./context/auth\";\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n    const { setCurrentUser } = useAuth();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => {\r\n                const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n                setCurrentUser(currentUser);\r\n                if (currentUser) {\r\n                    return (<Component {...props} />);\r\n                } else {\r\n                    return (<Redirect to={{ pathname: \"/login\", state: { referer: props.location } }} />)\r\n                }\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\n\r\nfunction Home(props) {\r\n    return <div>Home Page</div>\r\n}\r\n\r\nexport default Home;","import styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n  box-sizing: border-box;\r\n  max-width: 410px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 1rem;\r\n  border: 1px solid #999;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: linear-gradient(to bottom, #6371c7, #5563c1);\r\n  border-color: #3f4eae;\r\n  border-radius: 3px;\r\n  padding: 1rem;\r\n  color: white;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 50%;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst Error = styled.div`\r\n  background-color: #5866c2;\r\n  color: #fff;\r\n  padding: 20px;\r\n  border-radius: 11px;\r\n  font-size: 16px;\r\n  margin: 20px;\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n`;\r\n\r\nexport { Form, Input, Button, Logo, Card, Error };","import React from 'react';\r\nimport { Button } from \"../components/AuthForms\";\r\nimport { useAuth } from \"../context/auth\";\r\n\r\nfunction Admin() {\r\n    const { setCurrentUser } = useAuth();\r\n    function logOut() {\r\n        setCurrentUser();\r\n        localStorage.removeItem('currentUser');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>Admin Page</div>\r\n            <Button onClick={logOut}>Log out</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Admin;","\r\nimport React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport logoImg from \"../img/logo.png\";\r\nimport { Card, Logo, Form, Input, Button, Error } from \"../components/AuthForms\";\r\n\r\nfunction Login(props) {\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const referer = (props.location.state && props.location.state.referer) || '/admin';\r\n\r\n    function postLogin() {\r\n        let users = localStorage.getItem('users');\r\n        if (!users) {\r\n            users = [];\r\n        } else {\r\n            users = JSON.parse(users);\r\n        }\r\n\r\n        const findedUser = users.find((x) => {\r\n            if(x.password === password && userName === x.userName) {\r\n                return x;\r\n            }\r\n        })\r\n\r\n        if(!findedUser) {\r\n            setIsError(true);\r\n        } else {\r\n            localStorage.setItem('currentUser', JSON.stringify(findedUser));\r\n            setLoggedIn(true);\r\n        }\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={referer} />;\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <Logo src={logoImg} />\r\n            <Form>\r\n                <Input\r\n                    type=\"email\"\r\n                    placeholder=\"email\"\r\n                    value={userName}\r\n                    onChange={e => {\r\n                        setUserName(e.target.value);\r\n                    }}\r\n                />\r\n                <Input\r\n                    type=\"password\"\r\n                    placeholder=\"password\"\r\n                    value={password}\r\n                    onChange={e => {\r\n                        setPassword(e.target.value);\r\n                    }}\r\n                />\r\n                <Button onClick={postLogin}>Sign In</Button>\r\n            </Form>\r\n            <Link to=\"/signup\">Don't have an account?</Link>\r\n            {isError && <Error>The username or password provided were incorrect!</Error>}\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Login;","import React, { useState } from \"react\";\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport logoImg from \"../img/logo.png\";\r\nimport { Card, Logo, Form, Input, Button, Error } from '../components/AuthForms';\r\n\r\nfunction Signup() {\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    function registerUser() {\r\n        if (userName && password && repeatPassword) {\r\n            const user = {\r\n                userName,\r\n                password,\r\n            }\r\n            let users = localStorage.getItem('users');\r\n            if (!users) {\r\n                users = [];\r\n            } else {\r\n                users = JSON.parse(users);\r\n            }\r\n            const userCandidate = users.find(x => x.userName === userName);\r\n\r\n            if (!userCandidate && password === repeatPassword) {\r\n                users.push(user);\r\n                localStorage.setItem('users', JSON.stringify(users));\r\n                localStorage.setItem('currentUser', JSON.stringify(user));\r\n                setLoggedIn(true);\r\n            } else {\r\n                setMessage('User already exist or password did not match!');\r\n            }\r\n        } else {\r\n            setMessage('All fields are required!');\r\n        }\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/admin\" />;\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <Logo src={logoImg} />\r\n            <Form>\r\n                <Input\r\n                    type=\"email\"\r\n                    placeholder=\"email\"\r\n                    value={userName}\r\n                    onChange={e => {\r\n                        setUserName(e.target.value);\r\n                    }}\r\n                />\r\n                <Input\r\n                    type=\"password\"\r\n                    placeholder=\"password\"\r\n                    value={password}\r\n                    onChange={e => {\r\n                        setPassword(e.target.value);\r\n                    }}\r\n                />\r\n                <Input\r\n                    type=\"password\"\r\n                    placeholder=\"password again\"\r\n                    value={repeatPassword}\r\n                    onChange={e => {\r\n                        setRepeatPassword(e.target.value);\r\n                    }}\r\n                />\r\n                <Button onClick={registerUser}>Sign Up</Button>\r\n            </Form>\r\n            <Link to=\"/login\">Already have an account?</Link>\r\n            {message && <Error>{message}</Error>}\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Signup;","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\nimport './App.css';\nimport PrivateRoute from './PrivateRoute';\n\nimport Home from './pages/Home';\nimport Admin from './pages/Admin';\n\nimport { AuthContext } from \"./context/auth\";\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState();\n\n\n  const setTokens = (data) => {\n    setCurrentUser(!!data);\n  }\n\n\n\n  return (\n    <AuthContext.Provider value={{ currentUser, setCurrentUser: setTokens }}>\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/\">Home Page</Link>\n            </li>\n            <li className={!currentUser ? 'hidden' : ''}>\n              <Link to=\"/admin\">Admin Page</Link>\n            </li>\n            <li className={currentUser ? 'hidden' : ''}>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            <li className={currentUser ? 'hidden' : ''}>\n              <Link to=\"/signup\">Signup</Link>\n            </li>\n            <li>\n              <a target=\"blank\" href=\"https://github.com/EduardLubomirsky/react-simple-login\">Github</a>\n            </li>\n          </ul>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <PrivateRoute path=\"/admin\" component={Admin} />\n\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}